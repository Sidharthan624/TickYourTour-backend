"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const userController_1 = __importDefault(require("../../adapters/controllers/userController"));
const userRepository_1 = __importDefault(require("../repository/userRepository"));
const sendEmail_1 = __importDefault(require("../utils/sendEmail"));
const generateOTP_1 = __importDefault(require("../utils/generateOTP"));
const userUseCase_1 = __importDefault(require("../../useCase/userUseCase"));
const JWTtoken_1 = __importDefault(require("../utils/JWTtoken"));
const hashPassword_1 = __importDefault(require("../utils/hashPassword"));
const userAuth_1 = __importDefault(require("../middleware/userAuth"));
const express_1 = __importDefault(require("express"));
const cloudinary_1 = __importDefault(require("../utils/cloudinary"));
const multer_1 = require("../middleware/multer");
const repository = new userRepository_1.default();
const otp = new generateOTP_1.default();
const sendOtp = new sendEmail_1.default();
const jwt = new JWTtoken_1.default();
const hashPwd = new hashPassword_1.default();
const cloud = new cloudinary_1.default();
const usercase = new userUseCase_1.default(repository, hashPwd, otp, jwt, sendOtp, cloud);
const controller = new userController_1.default(usercase);
const router = express_1.default.Router();
router.post('/verifyMail', (req, res) => { controller.verifyEmail(req, res); });
router.post('/verifyOtp', (req, res) => { controller.verifyOtp(req, res); });
router.post('/resendOtp', (req, res) => { controller.resendOtp(req, res); });
router.post('/login', (req, res) => { controller.login(req, res); });
router.post('/logout', (req, res) => { controller.logout(req, res); });
router.post('/gSignUp', (req, res) => { controller.gSignUp(req, res); });
router.post('forgotPassword', (req, res) => { controller.forgotPassword(req, res); });
router.post('/resetPassword', (req, res) => { controller.resetPassword(req, res); });
router.post('/verifyForgotPassword', (req, res) => { controller.verifyOtpForgotPassword(req, res); });
router.get('/profile', userAuth_1.default, (req, res) => { controller.profile(req, res); });
router.put('/editProfile', userAuth_1.default, multer_1.uploadFile.single('image'), (req, res) => { controller.editProfile(req, res); });
router.get('/singlePackage/:id', userAuth_1.default, (req, res) => { controller.singlePackage(req, res); });
router.get('/fetchPackage', userAuth_1.default, (req, res) => { controller.fetchPackage(req, res); });
router.post('/rate', userAuth_1.default, (req, res) => { controller.rate(req, res); });
router.post('editRate', userAuth_1.default, (req, res) => { controller.editRate(req, res); });
router.get('/getRatings', userAuth_1.default, (req, res) => { controller.getRating(req, res); });
router.get('/getProvider', userAuth_1.default, (req, res) => { controller.getProvider(req, res); });
router.get('/findRateById', userAuth_1.default, (req, res) => { controller.findRatingById(req, res); });
router.get('/getBookingDetails', userAuth_1.default, (req, res) => { controller.getBookingDetails(req, res); });
router.get('/findUser', userAuth_1.default, (req, res) => { controller.findUser(req, res); });
exports.default = router;
