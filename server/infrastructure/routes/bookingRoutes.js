"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bookingController_1 = __importDefault(require("../../adapters/controllers/bookingController"));
const bookingRepository_1 = __importDefault(require("../repository/bookingRepository"));
const bookingUseCase_1 = __importDefault(require("../../useCase/bookingUseCase"));
const stripe_1 = __importDefault(require("../utils/stripe"));
const sendEmail_1 = __importDefault(require("../utils/sendEmail"));
const express_1 = __importDefault(require("express"));
const providerAuth_1 = __importDefault(require("../middleware/providerAuth"));
const bookingrepository = new bookingRepository_1.default();
const stripepayment = new stripe_1.default();
const sendmail = new sendEmail_1.default();
const bookingusecase = new bookingUseCase_1.default(bookingrepository, stripepayment, sendmail);
const controller = new bookingController_1.default(bookingusecase);
const router = express_1.default.Router();
router.post('/newBooking', (req, res) => { controller.newBooking(req, res); });
router.get('/getCheckout/:bookingId', (req, res) => { controller.getCheckout(req, res); });
router.post('/proceedForPayment', (req, res) => { controller.proceedForPayment(req, res); });
router.post('/proceedForSubscription', providerAuth_1.default, (req, res) => { controller.proceedForSubscription(req, res); });
router.post('/saveSession', (req, res) => { controller.saveSession(req, res); });
router.post('/confirmPayment', (req, res) => { controller.confirmPayment(req, res); });
router.post('/confirmSubscription', (req, res) => { controller.confirmSubscription(req, res); });
router.get('/getBookings', (req, res) => { controller.getBookings(req, res); });
router.post('/cancelBooking', (req, res) => { controller.cancelBooking(req, res); });
router.post('/cancelBooking', (req, res) => { controller.cancelBooking(req, res); });
router.post('/cancelSubscription', (req, res) => { controller.cancelSubscription(req, res); });
router.get('/getBookingsByProviderId', (req, res) => { controller.getBookingsByProviderId(req, res); });
exports.default = router;
